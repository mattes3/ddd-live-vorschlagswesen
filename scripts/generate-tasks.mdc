# Rule: Generating a Task List from a PRD

## Goal

To guide an AI assistant in creating a detailed, step-by-step task list in Markdown format based on an existing Product Requirements Document (PRD). The task list should guide a developer through implementation.

## Output

- **Format:** Markdown (`.md`)
- **Location:** `./tasks/`
- **Filename:** `tasks-[prd-file-name].md` (e.g., `tasks-prd-user-profile-editing.md`)

## Process

1.  **Receive PRD Reference:** The user points the AI to a specific PRD file
2.  **Analyze PRD:** The AI reads and analyzes the functional requirements, user stories, and other sections of the specified PRD.
3.  **Phase 1: Generate Parent Tasks:** Based on the PRD analysis, create the file and generate the main, high-level tasks required to implement the feature. Use your judgement on how many high-level tasks to use. It's likely to be about 5. Present these tasks to the user in the specified format (without sub-tasks yet). Inform the user: "I have generated the high-level tasks based on the PRD. Ready to generate the sub-tasks? Respond with 'Go' to proceed."
4.  **Wait for Confirmation:** Pause and wait for the user to respond with "Go".
5.  **Phase 2: Generate Sub-Tasks:** Once the user confirms, break down each parent task into smaller, actionable sub-tasks necessary to complete the parent task. Ensure sub-tasks logically follow from the parent task and cover the implementation details implied by the PRD.
6.  **Identify Relevant Files:** Based on the tasks and PRD, identify potential files that will need to be created or modified. List these under the `Relevant Files` section, including corresponding test files if applicable.
7.  **Generate Final Output:** Combine the parent tasks, sub-tasks, relevant files, and notes into the final Markdown structure.
8.  **Save Task List:** Save the generated document in the `/tasks/` directory with the filename `tasks-[prd-file-name].md`, where `[prd-file-name]` matches the base name of the input PRD file (e.g., if the input was `prd-user-profile-editing.md`, the output is `tasks-prd-user-profile-editing.md`).
9. Do NOT implement any task at all, until the user tells you so!

## Output Format

The AI _must_ respect the following architectural guidelines when emitting code:

- The domain logic goes into subpackages that reside under `packages/domainlogic`.

- The web UI and its request handlers go into subpackages that reside under `packages/containers` (they are called "containers" because each one runs a stand-alone web server that serves the requests for a particular parent URL).

- The containers always have a `backend` and a `frontend` folder. Under those folders, there is a `src` folder for the sources, and a `test` folder for the unit tests. This applies to frontend as well as backend.

- The frontend uses HTML page templates that are rendered on the backend, using Mustache as a template engine. This explains the strange `{{` and `}}` inside the HTML. The frontned also uses HTMX for hypermedia operations. For styling, it uses Tailwind CSS. 

- The UI is based on so-called web request handlers that take parameters from the URL, or from the query string, or from the request body of each HTTP request. Each web request handler is simply a function that is called by the Hono web framework.

- The web request handlers reside in the following packages: `packages/containers/containername/src/adapters/webui/MyHandlers.ts`.

- The web request handlers sometimes need access to a service from the domain logic layer. Import the service interface type from a project in `packages/domainlogic/**`. Export a function that gets the needed dependencies (i.e. the service interface) as an object with properties. The function should be named `getMyHandlers` and should return an object that satisfies the `MyHandlers` interface.

- The frontend must use really old-school mechanisms of HTML and HTTP. For example, the POST request caused by submitting a form must not be handled inside a JavaScript or TypeScript custom component. Instead, it should be posted directly to a POST web request handler in the backend which does all the validation, invokes a service and returns the response using Mustache. When the validation fails, the backend returns a form with nested validation error messages. Use the `{{ > error-messages-here }}` partial for that purpose.

- The frontend must use the HTMX framework to allow partial updates of the DOM, using `data-hx-get`, `data-hx-put`, , or `data-hx-post`. Read `https://htmx.org/docs/` to understand how HTMX handles HTTP requests and replaces parts of the DOM.

- When a certain functionality in the UI would be too difficult to do with standard HTML, use the `shoelace` web components to get the job done. For example, native select boxes in the browser look ugly, so generate a `<sl-select />` tag, instead. 

- For validation in the backend, use `zod`.

- Use `ts-result-es` to write service functions that return a `Result` type (which may be Ok or Error, similar to what happens in the Rust programming language). To understand how that Result type works, read the documentation at `https://ts-results-es.readthedocs.io/en/latest/`.

- In the web request handlers, use service calls to the domain logic layer (see `packages/domainlogic`). These service calls should use `AsyncResult` as described in `https://ts-results-es.readthedocs.io/en/latest/reference/asyncresult.html`. This way, the web request handlers can handle errors systematically and respond with a proper error message when the `AsyncResult` contains an error instead of a value.

The generated task list _must_ follow this structure:

```markdown
## Relevant Files

- `src/path/to/potential/file1.ts` - Brief description of why this file is relevant (e.g., Contains the main component for this feature).
- `test/path/to/file1.test.ts` - Unit tests for `file1.ts`.
- `src/path/to/another/file.ts` - Brief description (e.g., web request handler for data submission).
- `test/path/to/another/file.test.ts` - Unit tests for `another/file.ts`.

### Notes

- Unit tests should typically be placed in the `test` folder next to the `src` folder that is a parent for the code files they are testing (e.g., `src/path/to/myrequesthandler.ts` and `test/path/to/myrequesthandler.test.ts`).
- Use `vitest` to run tests. Running without a path executes all tests found by the vite configuration.
- Avoid using client side script code as long as the backend can do the job.

## Tasks

- [ ] 1.0 Parent Task Title
  - [ ] 1.1 [Sub-task description 1.1]
  - [ ] 1.2 [Sub-task description 1.2]
- [ ] 2.0 Parent Task Title
  - [ ] 2.1 [Sub-task description 2.1]
- [ ] 3.0 Parent Task Title (may not require sub-tasks if purely structural or configuration)
```

## Interaction Model

The process explicitly requires a pause after generating parent tasks to get user confirmation ("Go") before proceeding to generate the detailed sub-tasks. This ensures the high-level plan aligns with user expectations before diving into details. Even when you get a "Go" from the user, avoid implementation of any tasks until the user asks you to implement a task with a particular number!

## Target Audience

Assume the primary reader of the task list is a **junior developer** who will implement the feature.
